/*----- PROTECTED REGION ID(Mytest.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        Mytest.cpp
//
// description : C++ source for the Mytest and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               Mytest are implemented in this file.
//
// project :     TestinsVasil.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <Mytest.h>
#include <MytestClass.h>
#include <yat/utils/StringTokenizer.h>
#include <yat/utils/XString.h>
#include <jpeglib.h>
#include <stdio.h>
#include <stdlib.h>
#include <cv.h>
#include <highgui.h>
//using namespace cimg_library;
int W = 468, H = 315;

/*----- PROTECTED REGION END -----*/


/**
 *	Mytest class description:
 *	Just for fun
 */

//================================================================
//
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name                  |  Method name
//----------------------------------------------------------------
//  State                         |  Inherited (no method)
//  Status                        |  Inherited (no method)
//  MyReadScalarCommand           |  my_read_scalar_command
//  ReadLocalDataFromTangoServer  |  read_local_data_from_tango_server
//  GeneratingRandomDataImage     |  generating_random_data_image
//  SetDataImage                  |  set_data_image
//  Load16BitImg                  |  load16_bit_img
//================================================================

namespace Mytest_ns
{
	/*----- PROTECTED REGION ID(Mytest::namespace_starting) ENABLED START -----*/

	//	static initializations

	/*----- PROTECTED REGION END -----*/	//	Mytest::namespace_starting



//--------------------------------------------------------
/**
 *	Method      : Mytest::Mytest()
 *	Description : Constructors for a Tango device
 *	              implementing the class Mytest
 */
//--------------------------------------------------------
Mytest::Mytest(Tango::DeviceClass *cl, string &s)
 	: Tango::Device_4Impl(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(Mytest::constructor_1) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	Mytest::constructor_1
}
//--------------------------------------------------------
Mytest::Mytest(Tango::DeviceClass *cl, const char *s)
 	: Tango::Device_4Impl(cl, s)
{
	/*----- PROTECTED REGION ID(Mytest::constructor_2) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	Mytest::constructor_2
}
//--------------------------------------------------------
Mytest::Mytest(Tango::DeviceClass *cl, const char *s, const char *d)
 	: Tango::Device_4Impl(cl, s, d)
{
	/*----- PROTECTED REGION ID(Mytest::constructor_3) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	Mytest::constructor_3
}


//--------------------------------------------------------
/**
 *	Method      : Mytest::delete_device()()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void Mytest::delete_device()
{
	/*----- PROTECTED REGION ID(Mytest::delete_device) ENABLED START -----*/

	//	Delete device allocated objects

	/*----- PROTECTED REGION END -----*/	//	Mytest::delete_device
	delete[] attr_ScalarDouble_read;
	delete[] attr_ScalarStr_read;
	delete[] attr_FlipHorizontal_read;
	delete[] attr_FlipVertical_read;
	delete[] attr_Rotate_read;
	delete[] attr_TestImage_read;
	delete[] attr_UShortImg_read;
	
}


//--------------------------------------------------------
/**
 *	Method      : Mytest::init_device()
 *	Description : //	will be called at device initialization.
 */
//--------------------------------------------------------
void Mytest::init_device()
{
	DEBUG_STREAM << "Mytest::init_device() create device " << device_name << endl;

	
	attr_ScalarDouble_read = new Tango::DevDouble[1];
	attr_ScalarStr_read = new Tango::DevString[1];
	attr_FlipHorizontal_read = new Tango::DevBoolean[1];
	attr_FlipVertical_read = new Tango::DevBoolean[1];
	attr_Rotate_read = new Tango::DevULong[1];
	attr_TestImage_read = new Tango::DevUChar[99999 * 99999];
	attr_UShortImg_read = new Tango::DevUShort[99999 * 99999];
	
	/*----- PROTECTED REGION ID(Mytest::init_device) ENABLED START -----*/

	//	Initialize device

	/*----- PROTECTED REGION END -----*/	//	Mytest::init_device
}



//--------------------------------------------------------
/**
 *	Method      : Mytest::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void Mytest::always_executed_hook()
{
	INFO_STREAM << "Mytest::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(Mytest::always_executed_hook) ENABLED START -----*/

	//	code always executed before all requests

	/*----- PROTECTED REGION END -----*/	//	Mytest::always_executed_hook
}



//--------------------------------------------------------
/**
 *	Method      : Mytest::read_attr_hardware()
 *	Description : Hardware acquisition for attributes.
 */
//--------------------------------------------------------
void Mytest::read_attr_hardware(vector<long> &attr_list)
{
	DEBUG_STREAM << "Mytest::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Mytest::read_attr_hardware) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	Mytest::read_attr_hardware

}


//--------------------------------------------------------
/**
 *	Read ScalarDouble attribute
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void Mytest::read_ScalarDouble(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Mytest::read_ScalarDouble(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Mytest::read_ScalarDouble) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_ScalarDouble_read);

	/*----- PROTECTED REGION END -----*/	//	Mytest::read_ScalarDouble
}

//--------------------------------------------------------
/**
 *	Write ScalarDouble attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void Mytest::write_ScalarDouble(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Mytest::write_ScalarDouble(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(Mytest::write_ScalarDouble) ENABLED START -----*/

	

	/*----- PROTECTED REGION END -----*/	//	Mytest::write_ScalarDouble
}

//--------------------------------------------------------
/**
 *	Read ScalarStr attribute
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void Mytest::read_ScalarStr(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Mytest::read_ScalarStr(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Mytest::read_ScalarStr) ENABLED START -----*/

	//	Set the attribute value

	attr.set_value(attr_ScalarStr_read);

	/*----- PROTECTED REGION END -----*/	//	Mytest::read_ScalarStr
}
//--------------------------------------------------------
/**
 *	Read FlipHorizontal attribute
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void Mytest::read_FlipHorizontal(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Mytest::read_FlipHorizontal(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Mytest::read_FlipHorizontal) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_FlipHorizontal_read);

	/*----- PROTECTED REGION END -----*/	//	Mytest::read_FlipHorizontal
}

//--------------------------------------------------------
/**
 *	Write FlipHorizontal attribute values to hardware.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void Mytest::write_FlipHorizontal(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Mytest::write_FlipHorizontal(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(Mytest::write_FlipHorizontal) ENABLED START -----*/

	

	/*----- PROTECTED REGION END -----*/	//	Mytest::write_FlipHorizontal
}

//--------------------------------------------------------
/**
 *	Read FlipVertical attribute
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void Mytest::read_FlipVertical(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Mytest::read_FlipVertical(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Mytest::read_FlipVertical) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_FlipVertical_read);

	/*----- PROTECTED REGION END -----*/	//	Mytest::read_FlipVertical
}

//--------------------------------------------------------
/**
 *	Write FlipVertical attribute values to hardware.
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void Mytest::write_FlipVertical(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Mytest::write_FlipVertical(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(Mytest::write_FlipVertical) ENABLED START -----*/

	

	/*----- PROTECTED REGION END -----*/	//	Mytest::write_FlipVertical
}

//--------------------------------------------------------
/**
 *	Read Rotate attribute
 *	Description: 
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void Mytest::read_Rotate(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Mytest::read_Rotate(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Mytest::read_Rotate) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Rotate_read);

	/*----- PROTECTED REGION END -----*/	//	Mytest::read_Rotate
}

//--------------------------------------------------------
/**
 *	Write Rotate attribute values to hardware.
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void Mytest::write_Rotate(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Mytest::write_Rotate(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevULong	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(Mytest::write_Rotate) ENABLED START -----*/

	

	/*----- PROTECTED REGION END -----*/	//	Mytest::write_Rotate
}

//--------------------------------------------------------
/**
 *	Read TestImage attribute
 *	Description: 
 *
 *	Data type:	Tango::DevUChar
 *	Attr type:	Image  max = 99999 x 99999
 */
//--------------------------------------------------------
void Mytest::read_TestImage(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Mytest::read_TestImage(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Mytest::read_TestImage) ENABLED START -----*/

	//	Set the attribute value
	
	attr.set_value(attr_TestImage_read, W, H);//468, 315);//3882, 964);
	/*----- PROTECTED REGION END -----*/	//	Mytest::read_TestImage
}

//--------------------------------------------------------
/**
 *	Write TestImage attribute values to hardware.
 *
 *	Data type:	Tango::DevUChar
 *	Attr type:	Image  max = 99999 x 99999
 */
//--------------------------------------------------------
void Mytest::write_TestImage(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Mytest::write_TestImage(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve number of write values
	int	w_length = attr.get_write_value_length();

	//	Retrieve pointer on write values (Do not delete !)
	const Tango::DevUChar	*w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(Mytest::write_TestImage) ENABLED START -----*/

	

	/*----- PROTECTED REGION END -----*/	//	Mytest::write_TestImage
}

//--------------------------------------------------------
/**
 *	Read UShortImg attribute
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Image  max = 99999 x 99999
 */
//--------------------------------------------------------
void Mytest::read_UShortImg(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Mytest::read_UShortImg(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Mytest::read_UShortImg) ENABLED START -----*/

	//	Set the attribute value
	fprintf(stderr,"WwwwwwwwW");
	fprintf(stderr,"W=%d,H=%d",W,H);
	fprintf(stderr,"\nattr_UShortImg_read = %d\n",*attr_UShortImg_read);
	fprintf(stderr,"\nattr_UShortImg_read = %d\n",*(attr_UShortImg_read+1));
	fprintf(stderr,"\nattr_UShortImg_read = %d\n",*(attr_UShortImg_read+1000));
	fprintf(stderr,"\nattr_UShortImg_read = %d\n",*(attr_UShortImg_read+10000));
	attr.set_value(attr_UShortImg_read, W,H);//99999, 99999);
// 	//attr.set_value(attr_TestImage_read, W,H); put only one vector

	/*----- PROTECTED REGION END -----*/	//	Mytest::read_UShortImg
}

//--------------------------------------------------------
/**
 *	Write UShortImg attribute values to hardware.
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Image  max = 99999 x 99999
 */
//--------------------------------------------------------
void Mytest::write_UShortImg(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Mytest::write_UShortImg(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve number of write values
	int	w_length = attr.get_write_value_length();

	//	Retrieve pointer on write values (Do not delete !)
	const Tango::DevUShort	*w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(Mytest::write_UShortImg) ENABLED START -----*/

	

	/*----- PROTECTED REGION END -----*/	//	Mytest::write_UShortImg
}


//--------------------------------------------------------
/**
 *	Method      : Mytest::MytestClass::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *	              for specified device.
 */
//--------------------------------------------------------
void Mytest::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(Mytest::Class::add_dynamic_attributes) ENABLED START -----*/

	//	Add your own code to create and add dynamic attributes if any

	/*----- PROTECTED REGION END -----*/	//	Mytest::Class::add_dynamic_attributes

}



//========================================================
//	Command execution methods
//========================================================

//--------------------------------------------------------
/**
 *	Execute the MyReadScalarCommand command:
 *	Description: read string value
 *
 *	@param argin 
 *	@returns 
 */
//--------------------------------------------------------
Tango::DevString Mytest::my_read_scalar_command()
{
	Tango::DevString argout;
	DEBUG_STREAM << "Mytest::MyReadScalarCommand()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Mytest::my_read_scalar_command) ENABLED START -----*/

	//	Add your own code
	//argout = CORBA::string_dup("Hello");
	Tango::DevString argin = CORBA::string_dup("vasil");
	std::string result;
	//yat::SharedPtr<yat::Address> address;
	address.reset(new yat::Address("localhost", 41234));
	try {
			yat::ClientSocket socket;
			socket.connect(*address);
			socket << argin;
			//sendNewLineIfRequired(&socket);
			DEBUG_STREAM << "send: " << argin << endl;
			socket >> result;
			DEBUG_STREAM << "received: " << result << endl;
			socket.disconnect();
		//	setDeviceStatus(Tango::RUNNING, "The device is running and awaits requests.");
	}
	catch (yat::SocketException &e) 	{
		//setDeviceStatus(Tango::FAULT, "An error happened during sending the request to the connected device.");
		//DEBUG_STREAM << "Error while trying to communicate with: " << address->get_host_name() << ":" << address->get_port_number() << endl;
		DEBUG_STREAM << e.text() << endl;
		Tango::Except::throw_exception("Error while communicating via Socket", e.text(), __FUNCTION__);
	}
	catch (...) {
		//setDeviceStatus(Tango::FAULT, "An error happened during sending the request to the connected device.");
		Tango::Except::throw_exception("Unexpected Exception", "An unexpected exception has been caught", __FUNCTION__);
	}
	    argout = CORBA::string_dup(result.c_str());
	/*----- PROTECTED REGION END -----*/	//	Mytest::my_read_scalar_command

	return argout;
}

//--------------------------------------------------------
/**
 *	Execute the ReadLocalDataFromTangoServer command:
 *	Description: 
 *
 *	@param argin 
 *	@returns 
 */
//--------------------------------------------------------
Tango::DevString Mytest::read_local_data_from_tango_server()
{
	Tango::DevString argout;
	DEBUG_STREAM << "Mytest::ReadLocalDataFromTangoServer()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Mytest::read_local_data_from_tango_server) ENABLED START -----*/

	//	Add your own code

	//argout = attr_TestImage_read;
		Tango::DevString argin = CORBA::string_dup("readBigData");
	vector<unsigned char> result;
	std::string resultStr;
	//yat::SharedPtr<yat::Address> address;
	address.reset(new yat::Address("localhost", 41234));
	try {
			yat::ClientSocket socket;
			socket.connect(*address);
			socket << argin;
			//sendNewLineIfRequired(&socket);
			DEBUG_STREAM << "send: " << argin << endl;
			socket >> resultStr;
			DEBUG_STREAM << "received: " << resultStr << endl;
			socket.disconnect();
		//	setDeviceStatus(Tango::RUNNING, "The device is running and awaits requests.");
	}
	catch (yat::SocketException &e) 	{
		//setDeviceStatus(Tango::FAULT, "An error happened during sending the request to the connected device.");
		//DEBUG_STREAM << "Error while trying to communicate with: " << address->get_host_name() << ":" << address->get_port_number() << endl;
		DEBUG_STREAM << e.text() << endl;
		Tango::Except::throw_exception("Error while communicating via Socket", e.text(), __FUNCTION__);
	}
	catch (...) {
		//setDeviceStatus(Tango::FAULT, "An error happened during sending the request to the connected device.");
		Tango::Except::throw_exception("Unexpected Exception", "An unexpected exception has been caught", __FUNCTION__);
	}
	//std::vector<unsigned char> a(resultStr.begin(), resultStr.end());
	//fprintf(stderr,"Reading data %d",a[0]);
	//argout = new char[a.size()+1];
	argout = CORBA::string_dup(resultStr.c_str());
	  //argout = CORBA::string_dup(a);//&a[0];
	    //argout = result;//CORBA::string_dup(result.c_str());
	/*----- PROTECTED REGION END -----*/	//	Mytest::read_local_data_from_tango_server

	return argout;
}

//--------------------------------------------------------
/**
 *	Execute the GeneratingRandomDataImage command:
 *	Description: 
 *
 *	@param argin 
 *	@returns 
 */
//--------------------------------------------------------
Tango::DevLong Mytest::generating_random_data_image()
{
	Tango::DevLong argout;
	DEBUG_STREAM << "Mytest::GeneratingRandomDataImage()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Mytest::generating_random_data_image) ENABLED START -----*/

	//	Add your own code
	int x, y;
	srand(256);
	//const Tango::DevUChar	*w_val;
	int max = 3882 * 964;
	for (x = 0; x<max; x++){
	//for (x = 0; x<3882; x++){
	 // for(y=0; y<964; y++){
	 //     *(*(attr_TestImage_read+x)+y) = rand();
	 // }
	      *(attr_TestImage_read+x) = rand();
	}
	W = 3882; H=964;
	/*----- PROTECTED REGION END -----*/	//	Mytest::generating_random_data_image

	return argout;
}

//--------------------------------------------------------
/**
 *	Execute the SetDataImage command:
 *	Description: Seting test Image into server
 *
 *	@param argin 
 *	@returns 
 */
//--------------------------------------------------------
Tango::DevULong Mytest::set_data_image()
{
	Tango::DevULong argout;
	DEBUG_STREAM << "Mytest::SetDataImage()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Mytest::set_data_image) ENABLED START -----*/

	//	Add your own code
/////////http://stackoverflow.com/questions/694080/how-do-i-read-jpeg-and-png-pixels-in-c-on-linux/////////
  //int loadJpg(const char* Name){
  //  strcpy(Name, );
      srand(time(NULL));
      int randomPic = rand()%10;
      char const * Name = "bear2.jpg";
      switch(randomPic){
	case 4:
	case 3:
	case 2: Name = "bear.jpg"; break;
	case 5:
	case 6:
	case 1: Name = "bear2.jpg"; break;
	case 7:
	case 8:
	case 9:
 	case 0: Name = "eagle.jpg"; break;
      }
      fprintf(stderr,"\nrandomPic = %d\n",randomPic);
      
      unsigned char a,r,g,b;
    int width, height;
      struct jpeg_decompress_struct cinfo;
      struct jpeg_error_mgr jerr;

      FILE * infile;        /* source file */
      JSAMPARRAY pJpegBuffer;       /* Output row buffer */
      int row_stride;       /* physical row width in output buffer */
    if ((infile = fopen(Name, "rb")) == NULL) 
    {
      fprintf(stderr, "can't open %s\n", Name);
      //return 0;
      exit(1);
    }
      cinfo.err = jpeg_std_error(&jerr);
      jpeg_create_decompress(&cinfo);
      jpeg_stdio_src(&cinfo, infile);
      (void) jpeg_read_header(&cinfo, TRUE);
      (void) jpeg_start_decompress(&cinfo);
      width = cinfo.output_width;
      height = cinfo.output_height;

      unsigned char * pDummy = new unsigned char [width*height*4];
      unsigned char * pTest=pDummy;
      if (!pDummy){
	printf("NO MEM FOR JPEG CONVERT!\n");
	//return 0;
	exit(1);
      }
      row_stride = width * cinfo.output_components ;
      pJpegBuffer = (*cinfo.mem->alloc_sarray)
	((j_common_ptr) &cinfo, JPOOL_IMAGE, row_stride, 1);

      while (cinfo.output_scanline < cinfo.output_height) {
	(void) jpeg_read_scanlines(&cinfo, pJpegBuffer, 1);
	for (int x=0;x<width;x++) {
	  a = 0; // alpha value is not supported on jpg
	  r = pJpegBuffer[0][cinfo.output_components*x];
      if (cinfo.output_components>2)
	  {
	  g = pJpegBuffer[0][cinfo.output_components*x+1];
	  b = pJpegBuffer[0][cinfo.output_components*x+2];
	  } else {
	  g = r;
	  b = r;
	}
	*(pDummy++) = b;
	*(pDummy++) = g;
	*(pDummy++) = r;
	*(pDummy++) = a;
	}
    }
    fclose(infile);
    (void) jpeg_finish_decompress(&cinfo);
    jpeg_destroy_decompress(&cinfo);

    //BMap = (int*)pTest; 
    //Height = height;
    //Width = width;
    //Depht = 32;
    //}
    //int *x;
    //x = (int *)pTest;
    //unsigned char *x = 
    int *x;
    x= (int *)pTest;
    unsigned char *iter = pTest;
    int y=1;
    delete[] attr_TestImage_read;
    attr_TestImage_read = NULL;
    attr_TestImage_read = pTest;
/*
 
    for (; iter!=pDummy; ++iter, ++x, y++){
    //  for (; x!=(int *)pDummy; ++iter, ++x, y++){
	//for (x = 0; x<3882; x++){
	 // for(y=0; y<964; y++){
	 //     *(*(attr_TestImage_read+x)+y) = rand();
	 // }
	//////////////	*(attr_TestImage_read+sizeof(iter)*y) = *iter;//*x;//rand();
	    //  *(attr_TestImage_read+y) = *x;//*x;//rand();
	      fprintf(stderr, "val%d= %d   %d   %d\n", y, x, *(attr_TestImage_read+sizeof(iter)*y), *iter);
	}
//return argout;
*/
  W = 468*4; H = 315;
	/*----- PROTECTED REGION END -----*/	//	Mytest::set_data_image

	return argout;
}

//--------------------------------------------------------
/**
 *	Execute the Load16BitImg command:
 *	Description: 
 *
 *	@param argin 
 *	@returns 
 */
//--------------------------------------------------------
Tango::DevBoolean Mytest::load16_bit_img()
{
	Tango::DevBoolean argout = true;
	DEBUG_STREAM << "Mytest::Load16BitImg()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Mytest::load16_bit_img) ENABLED START -----*/

	//	Add your own code
	////cv::Mat img;
	////img = cv::imread("img_000000.tiff", 0);
	/*IplImage* imgs = cvLoadImage("img16.tiff", 2);
	if (imgs){
	  fprintf(stderr,"IMG Not null");
	}
	else{
	  fprintf(stderr,"IMG Null");
	}
	cv::Mat img(imgs);
	*/ 
	cv::Mat img = cv::imread("img16.tiff", 2);
	W = img.cols;
	H = img.rows;
	fprintf(stderr,"\nW = %d\n",W);
	fprintf(stderr,"\nH = %d\n",H);
	//fprintf(stderr,"\nH = %d\n",);
	
	//int *myPtr = img.ptr<int>(0);
	unsigned short *myPtr = img.ptr<unsigned short>(0);
	
	//fprintf(stderr,"\Img Depth = %d\n",imgs->depth);
	fprintf(stderr,"\nmyPtr = %d\n",*myPtr);
	fprintf(stderr,"\nmyPtr = %d\n",*(myPtr+1));
	fprintf(stderr,"\nmyPtr = %d\n",*(myPtr+1000));
	fprintf(stderr,"\nmyPtr = %d\n",*(myPtr+10000));
	
	int i=0;
	int j=0;
	delete[] attr_TestImage_read;
	attr_TestImage_read = NULL;
	delete[] attr_UShortImg_read;
	attr_UShortImg_read = NULL;
	attr_UShortImg_read = new unsigned short[W*H];
	attr_TestImage_read = new unsigned char[W*H];
	unsigned short *uu = attr_UShortImg_read;
	unsigned char *uuchar = attr_TestImage_read;
	double count = W*H;
	for (i=0;i<H;i++){
	//  fprintf(stderr,"\nIter = %d\n",i);
	  for (j=0;j<W;j++){  
	  //*(attr_UShortImg_read+sizeof(attr_UShortImg_read)*(int)i) = *(myPtr+sizeof(myPtr)*(int)i);
	    //attr_UShortImg_read[i][j] = myPtr[i][j];
	      //*uu = *myPtr;
	      
	      *uu = *myPtr;
	      uu++;myPtr++;
	  }
	}
	/*
	IplImage* imgs8Bit = cvLoadImage("img16.tiff", 0);
	
	if (imgs8Bit){
	  fprintf(stderr,"IMG Not null");
	}
	else{
	  fprintf(stderr,"IMG Null");
	}
	cv::Mat imgData(imgs8Bit); 
	*/
	cv::Mat imgData = cv::imread("img16.tiff", 0);
	H = imgData.rows;
	W = imgData.cols;
	unsigned char *myPtrUChar = imgData.ptr<unsigned char>(0);
	for (i=0;i<H;i++){
	//  fprintf(stderr,"\nIter = %d\n",i);
	  for (j=0;j<W;j++){  
	  //*(attr_UShortImg_read+sizeof(attr_UShortImg_read)*(int)i) = *(myPtr+sizeof(myPtr)*(int)i);
	    //attr_UShortImg_read[i][j] = myPtr[i][j];
	      //*uu = *myPtr;
	      
	      *uuchar = *myPtrUChar;
	      uuchar++;myPtrUChar++;
	  }
	}
	
	//cvSetZero(imgs);
	//cvSetZero(imgs8Bit);
	/*----- PROTECTED REGION END -----*/	//	Mytest::load16_bit_img

	return argout;
}


	/*----- PROTECTED REGION ID(Mytest::namespace_ending) ENABLED START -----*/

	//	Additional Methods
// //--------------------------------------------------------
// /**
//  *	Execute the MyReadScalarCommand command:
//  *	Description: Read string definition
//  *
//  *	@param argin 
//  *	@returns 
//  */
// //--------------------------------------------------------
// Tango::DevString Mytest::my_read_scalar_command(Tango::DevLong argin)
// {
// 	Tango::DevString argout;
// 	DEBUG_STREAM << "Mytest::MyReadScalarCommand()  - " << device_name << endl;
// 	
// 	if (argin == 0){
// 	  argout = "is Work";  
// 	}
// 	else{
// 	  argout = "is not Work";
// 	}
// 	
// 	//	Add your own code
// 	//	Add your own code
// 	return argout;
// }


	/*----- PROTECTED REGION END -----*/	//	Mytest::namespace_ending
} //	namespace
