/*----- PROTECTED REGION ID(Mytest.h) ENABLED START -----*/
//=============================================================================
//
// file :        Mytest.h
//
// description : Include for the Mytest class.
//
// project :     TestinsVasil.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef MYTEST_H
#define MYTEST_H


#include <tango.h>
#include <yat/network/Address.h>
#include <yat/network/ClientSocket.h>
#include <yat/memory/SharedPtr.h>

/*----- PROTECTED REGION END -----*/


/**
 *	Mytest class Description:
 *	Just for fun
 */

namespace Mytest_ns
{
	/*----- PROTECTED REGION ID(Mytest::Additional Class Declarations) ENABLED START -----*/

		//		Additional Class Declarations

	/*----- PROTECTED REGION END -----*/	//	Mytest::Additional Class Declarations


class Mytest : public Tango::Device_4Impl
{


	/*----- PROTECTED REGION ID(Mytest::Data Members) ENABLED START -----*/

	//		Add your own data members
public:
	yat::SharedPtr<yat::Address> address;

	/*----- PROTECTED REGION END -----*/	//	Mytest::Data Members


//	Device property data members
public:	

//	Attribute data members
public:
	Tango::DevDouble	*attr_ScalarDouble_read;
	Tango::DevString	*attr_ScalarStr_read;
	Tango::DevBoolean	*attr_FlipHorizontal_read;
	Tango::DevBoolean	*attr_FlipVertical_read;
	Tango::DevULong	*attr_Rotate_read;
	Tango::DevUChar	*attr_TestImage_read;
	Tango::DevUShort	*attr_UShortImg_read;



//	Constructors and destructors
public:
	/**
	 * Constructs a newly allocated Command object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Mytest(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly allocated Command object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Mytest(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly allocated Command object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	Mytest(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The object destructor.
	 */	
	~Mytest() {delete_device();};



//	Miscellaneous methods
public:
	/**
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/**
	 *	Initialize the device
	 */
	virtual void init_device();
	/**
	 *	Read the device properties from database
	 */
	 void get_device_property();
	/**
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	/**
	 *	Method      : Mytest::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	virtual void read_attr_hardware(vector<long> &attr_list);


	/**
	 *	ScalarDouble attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Scalar 
	 */
	virtual void read_ScalarDouble(Tango::Attribute &attr);
	virtual void write_ScalarDouble(Tango::WAttribute &attr);
	virtual bool is_ScalarDouble_allowed(Tango::AttReqType type);



	/**
	 *	ScalarStr attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevString
	 *	Attr type:	Scalar 
	 */
	virtual void read_ScalarStr(Tango::Attribute &attr);
	virtual bool is_ScalarStr_allowed(Tango::AttReqType type);



	/**
	 *	FlipHorizontal attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevBoolean
	 *	Attr type:	Scalar 
	 */
	virtual void read_FlipHorizontal(Tango::Attribute &attr);
	virtual void write_FlipHorizontal(Tango::WAttribute &attr);
	virtual bool is_FlipHorizontal_allowed(Tango::AttReqType type);



	/**
	 *	FlipVertical attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevBoolean
	 *	Attr type:	Scalar 
	 */
	virtual void read_FlipVertical(Tango::Attribute &attr);
	virtual void write_FlipVertical(Tango::WAttribute &attr);
	virtual bool is_FlipVertical_allowed(Tango::AttReqType type);



	/**
	 *	Rotate attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevULong
	 *	Attr type:	Scalar 
	 */
	virtual void read_Rotate(Tango::Attribute &attr);
	virtual void write_Rotate(Tango::WAttribute &attr);
	virtual bool is_Rotate_allowed(Tango::AttReqType type);



	/**
	 *	TestImage attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevUChar
	 *	Attr type:	Image  max = 99999 x 99999
	 */
	virtual void read_TestImage(Tango::Attribute &attr);
	virtual void write_TestImage(Tango::WAttribute &attr);
	virtual bool is_TestImage_allowed(Tango::AttReqType type);



	/**
	 *	UShortImg attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevUShort
	 *	Attr type:	Image  max = 99999 x 99999
	 */
	virtual void read_UShortImg(Tango::Attribute &attr);
	virtual void write_UShortImg(Tango::WAttribute &attr);
	virtual bool is_UShortImg_allowed(Tango::AttReqType type);



	/**
	 *	Method      : Mytest::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
		void add_dynamic_attributes();

//	Command related methods
public: 


	/**
	 *	Command MyReadScalarCommand related methods.
	 */
	Tango::DevString my_read_scalar_command();
	virtual bool is_MyReadScalarCommand_allowed(const CORBA::Any &any);

	/**
	 *	Command ReadLocalDataFromTangoServer related methods.
	 */
	Tango::DevString read_local_data_from_tango_server();
	virtual bool is_ReadLocalDataFromTangoServer_allowed(const CORBA::Any &any);

	/**
	 *	Command GeneratingRandomDataImage related methods.
	 */
	Tango::DevLong generating_random_data_image();
	virtual bool is_GeneratingRandomDataImage_allowed(const CORBA::Any &any);

	/**
	 *	Command SetDataImage related methods.
	 */
	Tango::DevULong set_data_image();
	virtual bool is_SetDataImage_allowed(const CORBA::Any &any);

	/**
	 *	Command Load16BitImg related methods.
	 */
	Tango::DevBoolean load16_bit_img();
	virtual bool is_Load16BitImg_allowed(const CORBA::Any &any);



	/*----- PROTECTED REGION ID(Mytest::Additional Method prototypes) ENABLED START -----*/

	//	Additional Method prototypes

	/*----- PROTECTED REGION END -----*/	//	Mytest::Additional Method prototypes

};

	/*----- PROTECTED REGION ID(Mytest::Additional Classes Definitions) ENABLED START -----*/

	//	Additional Classes definitions

	/*----- PROTECTED REGION END -----*/	//	Mytest::Additional Classes Definitions

} //	namespace

#endif	//	MYTEST_H
