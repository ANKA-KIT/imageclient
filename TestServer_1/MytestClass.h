/*----- PROTECTED REGION ID(MytestClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        MytestClass.h
//
// description : Include for the MytestClass root class.
//               This class is the singleton class for.
//               the Mytest device class..
//               It contains all properties and methods which the .
//               Mytest requires only once e.g. the commands.
//
// project :     TestinsVasil.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef MYTESTCLASS_H
#define MYTESTCLASS_H

#include <tango.h>
#include <Mytest.h>

/*----- PROTECTED REGION END -----*/

namespace Mytest_ns
{
	/*----- PROTECTED REGION ID(Mytest::classes for dynamic creation) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	Mytest::classes for dynamic creation



//=========================================
//	Define classes for attributes
//=========================================
//	Attribute ScalarDouble class definition
class ScalarDoubleAttrib: public Tango::Attr
{
public:
	ScalarDoubleAttrib():Attr("ScalarDouble",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~ScalarDoubleAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Mytest *>(dev))->read_ScalarDouble(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Mytest *>(dev))->write_ScalarDouble(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Mytest *>(dev))->is_ScalarDouble_allowed(ty);}
};

//	Attribute ScalarStr class definition
class ScalarStrAttrib: public Tango::Attr
{
public:
	ScalarStrAttrib():Attr("ScalarStr",
	                   Tango::DEV_STRING, Tango::READ) {};
	~ScalarStrAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Mytest *>(dev))->read_ScalarStr(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Mytest *>(dev))->is_ScalarStr_allowed(ty);}
};

//	Attribute FlipHorizontal class definition
class FlipHorizontalAttrib: public Tango::Attr
{
public:
	FlipHorizontalAttrib():Attr("FlipHorizontal",
	                   Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~FlipHorizontalAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Mytest *>(dev))->read_FlipHorizontal(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Mytest *>(dev))->write_FlipHorizontal(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Mytest *>(dev))->is_FlipHorizontal_allowed(ty);}
};

//	Attribute FlipVertical class definition
class FlipVerticalAttrib: public Tango::Attr
{
public:
	FlipVerticalAttrib():Attr("FlipVertical",
	                   Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~FlipVerticalAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Mytest *>(dev))->read_FlipVertical(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Mytest *>(dev))->write_FlipVertical(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Mytest *>(dev))->is_FlipVertical_allowed(ty);}
};

//	Attribute Rotate class definition
class RotateAttrib: public Tango::Attr
{
public:
	RotateAttrib():Attr("Rotate",
	                   Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~RotateAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Mytest *>(dev))->read_Rotate(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Mytest *>(dev))->write_Rotate(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Mytest *>(dev))->is_Rotate_allowed(ty);}
};

//	Attribute TestImage class definition
class TestImageAttrib: public Tango::ImageAttr
{
public:
	TestImageAttrib():ImageAttr("TestImage",
	                   Tango::DEV_UCHAR, Tango::READ_WRITE, 99999, 99999) {};
	~TestImageAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Mytest *>(dev))->read_TestImage(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Mytest *>(dev))->write_TestImage(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Mytest *>(dev))->is_TestImage_allowed(ty);}
};

//	Attribute UShortImg class definition
class UShortImgAttrib: public Tango::ImageAttr
{
public:
	UShortImgAttrib():ImageAttr("UShortImg",
	                   Tango::DEV_USHORT, Tango::READ_WRITE, 99999, 99999) {};
	~UShortImgAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Mytest *>(dev))->read_UShortImg(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Mytest *>(dev))->write_UShortImg(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Mytest *>(dev))->is_UShortImg_allowed(ty);}
};

//	Attribute UShortImgColor class definition
class UShortImgColorAttrib: public Tango::ImageAttr
{
public:
	UShortImgColorAttrib():ImageAttr("UShortImgColor",
	                   Tango::DEV_USHORT, Tango::READ_WRITE, 99999, 99999) {};
	~UShortImgColorAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Mytest *>(dev))->read_UShortImgColor(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Mytest *>(dev))->write_UShortImgColor(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Mytest *>(dev))->is_UShortImgColor_allowed(ty);}
};

//	Attribute TestImageColor class definition
class TestImageColorAttrib: public Tango::ImageAttr
{
public:
	TestImageColorAttrib():ImageAttr("TestImageColor",
	                   Tango::DEV_UCHAR, Tango::READ_WRITE, 99999, 99999) {};
	~TestImageColorAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Mytest *>(dev))->read_TestImageColor(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Mytest *>(dev))->write_TestImageColor(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Mytest *>(dev))->is_TestImageColor_allowed(ty);}
};





//=========================================
//	Define classes for commands
//=========================================
//	Command MyReadScalarCommand class definition
class MyReadScalarCommandClass : public Tango::Command
{
public:
	MyReadScalarCommandClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	MyReadScalarCommandClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~MyReadScalarCommandClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Mytest *>(dev))->is_MyReadScalarCommand_allowed(any);}
};

//	Command ReadLocalDataFromTangoServer class definition
class ReadLocalDataFromTangoServerClass : public Tango::Command
{
public:
	ReadLocalDataFromTangoServerClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ReadLocalDataFromTangoServerClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ReadLocalDataFromTangoServerClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Mytest *>(dev))->is_ReadLocalDataFromTangoServer_allowed(any);}
};

//	Command GeneratingRandomDataImage class definition
class GeneratingRandomDataImageClass : public Tango::Command
{
public:
	GeneratingRandomDataImageClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GeneratingRandomDataImageClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GeneratingRandomDataImageClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Mytest *>(dev))->is_GeneratingRandomDataImage_allowed(any);}
};

//	Command SetDataImage class definition
class SetDataImageClass : public Tango::Command
{
public:
	SetDataImageClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetDataImageClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetDataImageClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Mytest *>(dev))->is_SetDataImage_allowed(any);}
};

//	Command Load16BitImg class definition
class Load16BitImgClass : public Tango::Command
{
public:
	Load16BitImgClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	Load16BitImgClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~Load16BitImgClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Mytest *>(dev))->is_Load16BitImg_allowed(any);}
};





/**
 *	The TemplateDevServClass singleton definition
 */

class
#ifdef _TG_WINDOWS_
	__declspec(dllexport)
#endif
	MytestClass : public Tango::DeviceClass
{
	/*----- PROTECTED REGION ID(Mytest::Additionnal DServer data members) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	Mytest::Additionnal DServer data members



public:
//	write class properties data members
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static MytestClass *init(const char *);
	static MytestClass *instance();
	~MytestClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	MytestClass(string &);
	static MytestClass *_instance;
	void command_factory();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();
	void get_class_property();
	string get_cvstag();
	string get_cvsroot();

private:
	void device_factory(const Tango::DevVarStringArray *);
	void create_static_attribute_list(vector<Tango::Attr *> &);
	void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
	vector<string>	defaultAttList;


};

}	//	namespace

#endif	//	MYTESTCLASS_H

